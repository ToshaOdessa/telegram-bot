import asyncio
import aiohttp
from bs4 import BeautifulSoup

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7736087566:AAHqxednEIYyABQ5P_Xba_3fVbmYBtX6erQ'
CHAT_ID = 455634817
CHECK_INTERVAL = 60  # —Å–µ–∫; –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å HTML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤
known_events: set[str] = set()

async def fetch_events() -> list[tuple[str, str]]:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞).
    """
    url = 'https://platform.cartelclash.io/'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            html = await resp.text()
    soup = BeautifulSoup(html, 'html.parser')
    tiles = soup.find_all(class_='event-tile')
    result: list[tuple[str, str]] = []
    for tile in tiles:
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä–∏ <h3>
        h3 = tile.find('h3')
        # —Å—Å—ã–ª–∫–∞ ‚Äî –ø–µ—Ä–≤–∞—è <a>
        a = tile.find('a', href=True)
        if h3 and a:
            title = h3.get_text(strip=True)
            link = a['href']
            # –ø—Ä–∏–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –∫ –ø–æ–ª–Ω–æ–º—É URL (–µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è)
            if link.startswith('/'):
                link = 'https://platform.cartelclash.io' + link
            result.append((title, link))
    return result

async def check_new_events():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å known_events,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –Ω–æ–≤—ã–µ.
    """
    global known_events
    while True:
        try:
            events = await fetch_events()
            for title, link in events:
                if title not in known_events:
                    known_events.add(title)
                    text = (
                        f"üÜï <b>–ù–æ–≤—ã–π –∏–≤–µ–Ω—Ç</b>\n"
                        f"{title}\n"
                        f"<a href=\"{link}\">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>"
                    )
                    await bot.send_message(CHAT_ID, text)
        except Exception as e:
            # –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≤–µ–Ω—Ç–æ–≤:", e)
        await asyncio.sleep(CHECK_INTERVAL)

@dp.message(CommandStart())
async def on_start(message: types.Message):
    """
    –ü—Ä–∏ /start –±–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å –∏–≤–µ–Ω—Ç—ã.
    """
    await message.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏."
    )

async def main():
    # —Å—Ç–∞—Ä—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≤–µ–Ω—Ç–æ–≤
    asyncio.create_task(check_new_events())
    # –∑–∞–ø—É—Å–∫–∞–µ–º Polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
